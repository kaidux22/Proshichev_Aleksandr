{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserGet {\n  constructor(http) {\n    this.http = http;\n  }\n  GetUserData(num) {\n    return this.http.get('http://localhost:3000/userInfo/' + num);\n  }\n  GetUserNews(num) {\n    return this.http.post('http://localhost:3000/posts', {\n      \"content\": [num],\n      with: \"true\"\n    });\n  }\n  GetFriendsNews(num) {\n    return this.http.post('http://localhost:3000/posts', {\n      'content': [num],\n      with: \"false\"\n    });\n  }\n  GetUsers() {\n    return this.http.get('http://localhost:3000/users/');\n  }\n  AddUser(user) {\n    return this.http.post('http://localhost:3000/addUser', {\n      data: user\n    });\n  }\n  AddPost(news) {\n    return this.http.post('http://localhost:3000/addPost', {\n      data: news\n    });\n  }\n  EditUser(user) {\n    return this.http.post('http://localhost:3000/EditUser', {\n      data: user\n    });\n  }\n  EditPost(news) {\n    return this.http.post('http://localhost:3000/EditPost', {\n      data: news\n    });\n  }\n  GetMsgs(id1, id2) {\n    let data = [id1, id2];\n    data.sort();\n    return this.http.post('http://localhost:3000/msgs', {\n      data: data\n    });\n  }\n  SendMsg(msg, id_char) {\n    let data = [id_char, msg.author_id];\n    data.sort();\n    return this.http.post('http://localhost:3000/msgs', {\n      file: data\n    });\n  }\n  static #_ = this.ɵfac = function UserGet_Factory(t) {\n    return new (t || UserGet)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserGet,\n    factory: UserGet.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserGet","constructor","http","GetUserData","num","get","GetUserNews","post","with","GetFriendsNews","GetUsers","AddUser","user","data","AddPost","news","EditUser","EditPost","GetMsgs","id1","id2","sort","SendMsg","msg","id_char","author_id","file","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/kaidux22/Desktop/git_work/Proshichev_Aleksandr/University/Web/social-network/Client/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {HttpClient} from '@angular/common/http'\nimport { Observable, Subject } from \"rxjs\";\nimport { IMsg, INews, IUser } from \"../models/interfaces\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class UserGet{\n\n    constructor(private http: HttpClient){}\n\n    GetUserData(num : string): Observable<IUser>{\n        return this.http.get<IUser>('http://localhost:3000/userInfo/' + num)\n    }\n\n    GetUserNews(num : string): Observable<INews[]>{\n        return this.http.post<INews[]>('http://localhost:3000/posts', {\"content\": [num], with : \"true\"})\n    }\n\n    GetFriendsNews(num : string): Observable<INews[]>{\n        return this.http.post<INews[]>('http://localhost:3000/posts', {'content': [num], with : \"false\"})\n    }\n\n    GetUsers(): Observable<IUser[]>{\n        return this.http.get<IUser[]>('http://localhost:3000/users/')\n    }\n\n    AddUser(user: IUser): Observable<number>{\n        return this.http.post<number>('http://localhost:3000/addUser', {data : user})\n    }\n\n    AddPost(news: INews): Observable<number>{\n        return this.http.post<number>('http://localhost:3000/addPost', {data: news})\n    }\n\n    EditUser(user: IUser): Observable<boolean>{\n        return this.http.post<boolean>('http://localhost:3000/EditUser', {data: user})\n    }\n\n    EditPost(news: INews): Observable<boolean>{\n        return this.http.post<boolean>('http://localhost:3000/EditPost', {data : news})\n    }\n\n    GetMsgs(id1 : number, id2 : number): Observable<IMsg[]>{\n        let data = [id1, id2]\n        data.sort()\n        return this.http.post<IMsg[]>('http://localhost:3000/msgs', {data : data})\n    }\n\n    SendMsg(msg : IMsg, id_char : number): Observable<boolean>{\n        let data = [id_char, msg.author_id]\n        data.sort()\n        return this.http.post<boolean>('http://localhost:3000/msgs', {file : data})\n    }\n}"],"mappings":";;AASA,OAAM,MAAOA,OAAO;EAEhBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAc;EAEtCC,WAAWA,CAACC,GAAY;IACpB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,iCAAiC,GAAGD,GAAG,CAAC;EACxE;EAEAE,WAAWA,CAACF,GAAY;IACpB,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CAAU,6BAA6B,EAAE;MAAC,SAAS,EAAE,CAACH,GAAG,CAAC;MAAEI,IAAI,EAAG;IAAM,CAAC,CAAC;EACpG;EAEAC,cAAcA,CAACL,GAAY;IACvB,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CAAU,6BAA6B,EAAE;MAAC,SAAS,EAAE,CAACH,GAAG,CAAC;MAAEI,IAAI,EAAG;IAAO,CAAC,CAAC;EACrG;EAEAE,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAU,8BAA8B,CAAC;EACjE;EAEAM,OAAOA,CAACC,IAAW;IACf,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAAS,+BAA+B,EAAE;MAACM,IAAI,EAAGD;IAAI,CAAC,CAAC;EACjF;EAEAE,OAAOA,CAACC,IAAW;IACf,OAAO,IAAI,CAACb,IAAI,CAACK,IAAI,CAAS,+BAA+B,EAAE;MAACM,IAAI,EAAEE;IAAI,CAAC,CAAC;EAChF;EAEAC,QAAQA,CAACJ,IAAW;IAChB,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAAU,gCAAgC,EAAE;MAACM,IAAI,EAAED;IAAI,CAAC,CAAC;EAClF;EAEAK,QAAQA,CAACF,IAAW;IAChB,OAAO,IAAI,CAACb,IAAI,CAACK,IAAI,CAAU,gCAAgC,EAAE;MAACM,IAAI,EAAGE;IAAI,CAAC,CAAC;EACnF;EAEAG,OAAOA,CAACC,GAAY,EAAEC,GAAY;IAC9B,IAAIP,IAAI,GAAG,CAACM,GAAG,EAAEC,GAAG,CAAC;IACrBP,IAAI,CAACQ,IAAI,EAAE;IACX,OAAO,IAAI,CAACnB,IAAI,CAACK,IAAI,CAAS,4BAA4B,EAAE;MAACM,IAAI,EAAGA;IAAI,CAAC,CAAC;EAC9E;EAEAS,OAAOA,CAACC,GAAU,EAAEC,OAAgB;IAChC,IAAIX,IAAI,GAAG,CAACW,OAAO,EAAED,GAAG,CAACE,SAAS,CAAC;IACnCZ,IAAI,CAACQ,IAAI,EAAE;IACX,OAAO,IAAI,CAACnB,IAAI,CAACK,IAAI,CAAU,4BAA4B,EAAE;MAACmB,IAAI,EAAGb;IAAI,CAAC,CAAC;EAC/E;EAAC,QAAAc,CAAA,G;qBA9CQ3B,OAAO,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAPhC,OAAO;IAAAiC,OAAA,EAAPjC,OAAO,CAAAkC,IAAA;IAAAC,UAAA,EAHJ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}